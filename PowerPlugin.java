package me.max.power;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.attribute.Attribute;
import org.bukkit.block.Block;
import org.bukkit.Sound;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Fireball;
import org.bukkit.entity.Player;
import org.bukkit.entity.Entity;
import org.bukkit.event.EventHandler;
import org.bukkit.Location;
import org.bukkit.entity.Villager;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.inventory.MerchantRecipe;
import java.util.ArrayList;
import java.util.List;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.entity.EntityPotionEffectEvent;
import org.bukkit.event.entity.EntityTargetEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemConsumeEvent;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import net.kyori.adventure.text.Component;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.entity.LivingEntity;
import me.max.power.PowerCommandExecutor;

import java.util.*;

public class PowerPlugin extends JavaPlugin implements Listener {

    private final Map<UUID, String> playerClasses = new HashMap<>();
    private final Map<UUID, List<Long>> attackTimestamps = new HashMap<>();
    private final Map<UUID, Long> vampCooldown = new HashMap<>();
    private final long vampCooldownMillis = 4000;
    private final Map<Location, UUID> illusoryOres = new HashMap<>();
    private final Map<UUID, Long> kiborgCooldown = new HashMap<>();
    private final Map<UUID, Long> lastEatMessage = new HashMap<>();
    private final List<Material> validFishFoods = Arrays.asList(
            Material.COD, Material.COOKED_COD, Material.SALMON, Material.COOKED_SALMON,
            Material.PUFFERFISH, Material.TROPICAL_FISH, Material.DRIED_KELP
    );
    private final Map<UUID, Double> playerWealth = new HashMap<>();


    @Override
    public void onEnable() {
        Bukkit.getPluginManager().registerEvents(this, this);
        getCommand("power").setExecutor(new PowerCommandExecutor(this));

        applyAutoHeal(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!
        startWealthCheck();
        startRichManMurmur();
        startIllusoryOreSpawn();

        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                String pClass = playerClasses.get(player.getUniqueId());
                if (pClass != null) {
                    // –ö–∏–±–æ—Ä–≥: –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –≤–æ–¥–µ –∏ –≤–æ –≤—Ä–µ–º—è —à—Ç–æ—Ä–º–∞
                    if (pClass.equals("kiborg")) {
                        if (player.getLocation().getBlock().isLiquid() || player.getWorld().hasStorm()) {
                            player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 60, 2, false, false));
                            player.addPotionEffect(new PotionEffect(PotionEffectType.WITHER, 20, 1, false, false));

                            player.sendMessage("¬ßc–ö–∏–±–æ—Ä–≥–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è!");
                        }
                    }
                    // –†—ã–±–∞–∫: –ø–æ–ª—É—á–∞–µ—Ç Dolphin's Grace –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
                    if (pClass.equals("fisher")) {
                        player.addPotionEffect(new PotionEffect(PotionEffectType.DOLPHINS_GRACE, 40, 0, false, false));
                    }
                    // –ê–≤—Ç–æ–º–∞—Ç–æ–Ω: –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—á–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ I
                    if (pClass.equals("automaton")) {
                        player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, Integer.MAX_VALUE, 0, false, false));
                    }
                    // –±–æ–≥–æ—Ç–µ–π: –≤–µ—á–Ω–∞—è –æ–¥–µ—Ä–∂–∏–º–∞—Å—Ç—å –¥–µ–Ω—å–≥–∞–º–∏–º–º
                    if (pClass.equals("richman")) {
                    
                    }
                    if (pClass.equals("undead")) {
                       
                    }
                }
            }
        }, 20L, 20L);
    }

    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (command.getName().equalsIgnoreCase("test")) {
            if (!(sender instanceof Player)) {
                sender.sendMessage("¬ßc–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.");
                return true;
            }

            Player player = (Player) sender;
             if (args.length == 1 && args[0].equalsIgnoreCase("me")) {
            double health = player.getHealth();
            int hunger = player.getFoodLevel();
            float saturation = player.getSaturation();
            Location loc = player.getLocation();
            String classType = playerClasses.getOrDefault(player.getUniqueId(), "–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω");

            // üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∂–∞–¥–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –±–æ–≥–∞—Ç–µ–π
            double greed = playerWealth.getOrDefault(player.getUniqueId(), 0.0);




            player.sendMessage("¬ß7=== ¬ßa–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ¬ß7===");
            player.sendMessage("¬ß6–•–ü: ¬ße" + health);
            player.sendMessage("¬ß6–ì–æ–ª–æ–¥: ¬ße" + hunger);
            player.sendMessage("¬ß6–ù–∞—Å—ã—â–µ–Ω–∏–µ: ¬ße" + saturation);
            player.sendMessage("¬ß6–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ¬ßeX: " + loc.getBlockX() + " Y: " + loc.getBlockY() + " Z: " + loc.getBlockZ());
            player.sendMessage("¬ß6–ö–ª–∞—Å—Å: ¬ße" + classType);

            // üîπ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –±–æ–≥–∞—Ç—ã—Ö –∏ –∫–∏–±–æ—Ä–≥–æ–≤
            if (greed > 0) {
                player.sendMessage("¬ß6–ñ–∞–¥–Ω–æ—Å—Ç—å: ¬ße" + greed);
            }

            return true;
        }

            if (!player.isOp()) {
                player.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
                return true;
            }

            if (args.length < 4) {
                player.sendMessage("¬ßc–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test illusoryOres <–≤—Ä–µ–º—è> <x> <y> <z>");
                return true;
            }

            int duration;
            try {
                duration = Integer.parseInt(args[1]);
            } catch (NumberFormatException e) {
                player.sendMessage("¬ßc–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!");
                return true;
            }

            if (duration == 0) duration = Integer.MAX_VALUE; // üîπ –í–µ—á–Ω–∞—è —Ä—É–¥–∞

            double x, y, z;
            try {
                x = Double.parseDouble(args[2]);
                y = Double.parseDouble(args[3]);
                z = Double.parseDouble(args[4]);
            } catch (NumberFormatException e) {
                player.sendMessage("¬ßc–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!");
                return true;
            }

            Location loc = new Location(player.getWorld(), x, y, z);
            spawnIllusoryOre(player, loc, duration);

            player.sendMessage("¬ßa–ò–ª–ª—é–∑–æ—Ä–Ω–∞—è —Ä—É–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + x + ", " + y + ", " + z);
            return true;
        }
        return false;
    }

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        String pClass = playerClasses.get(player.getUniqueId());

        if (pClass == null) return;

        if (pClass.equals("fisher") && player.getLocation().getBlock().getType() == Material.MAGMA_BLOCK) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.STRENGTH, 40, 0, false, false));
        }
        if (pClass.equals("automaton")) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, Integer.MAX_VALUE, 0, false, false));
        }
    }
    public void startUndeadEffects() {
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                String pClass = playerClasses.get(player.getUniqueId());
                if ("undead".equals(pClass)) {

                    // üîπ –ì–æ—Ä–µ–Ω–∏–µ –Ω–∞ —Å–æ–ª–Ω—Ü–µ
                    if (player.getWorld().getTime() > 23000 || player.getWorld().getTime() < 13000) {
                        if (player.getWorld().getHighestBlockAt(player.getLocation()).getType() == Material.AIR) {
                            player.setFireTicks(100);
                        }
                    }

                    // üîπ –ï—Å–ª–∏ –•–ü < 10, –≤—ã–¥–∞—ë–º –°–∏–ª—É 1
                    if (player.getHealth() < 10) {
                        player.addPotionEffect(new PotionEffect(PotionEffectType.STRENGTH, 100, 0, false, false));
                    }

                    // üîπ –ò–Ω–≤–µ—Ä—Å–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–∫–∞–∫ —É –∑–æ–º–±–∏)
                    for (PotionEffect effect : player.getActivePotionEffects()) {
                        reverseEffect(player, effect);
                    }
                }
            }
        }, 200L, 400L); // üîπ –ö–∞–∂–¥—ã–µ 10-20 —Å–µ–∫
    }
    @EventHandler
    public void onUndeadBurnInSun(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        UUID uuid = player.getUniqueId();

        if (!playerClasses.getOrDefault(uuid, "").equals("Undead")) return;

        if (shouldBurnInSunlight(player)) {
            if (player.getFireTicks() <= 0) {
                player.setFireTicks(80); // 4 —Å–µ–∫—É–Ω–¥—ã –≥–æ—Ä–µ–Ω–∏—è
                player.sendMessage("¬ß4–°–æ–ª–Ω—Ü–µ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç —Ç–≤–æ—é –ø–ª–æ—Ç—å!");
                player.getWorld().playSound(player.getLocation(), Sound.ENTITY_ZOMBIE_HURT, 1, 0.8f);
            }
        }
    }
    @EventHandler
    public void onUndeadAttack(EntityDamageByEntityEvent event) {
        if (!(event.getDamager() instanceof Player player)) return;
        if (!(event.getEntity() instanceof LivingEntity victim)) return;
        if (!isUndead(player)) return;
        if (victim.isDead()) return;

        long now = System.currentTimeMillis();
        UUID uuid = player.getUniqueId();

        if (vampCooldown.containsKey(uuid) && now - vampCooldown.get(uuid) < vampCooldownMillis) return;

        double heal = isNight(player) ? 2.5 : 1.0;
        double newHp = Math.min(player.getHealth() + heal, player.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue());
        player.setHealth(newHp);

        vampCooldown.put(uuid, now);

        player.spawnParticle(Particle.HEART, player.getLocation().add(0, 1.4, 0), 6);
        player.getWorld().playSound(player.getLocation(), Sound.BLOCK_SOUL_ESCAPE, 0.7f, 0.6f);
    }

    private boolean isNight(Player player) {
        if ("undead".equals(pClass)){
        long time = player.getWorld().getTime();
        player.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, Integer.MAX_VALUE, 0, false, false));
        return time > 13000 || time < 1000;
        }
    }


    private void reverseEffect(Player player, PotionEffect effect) {
        PotionEffectType type = effect.getType();
        if (type == PotionEffectType.SLOWNESS) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, effect.getDuration(), effect.getAmplifier()));
        } else if (type == PotionEffectType.WEAKNESS) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.STRENGTH, effect.getDuration(), effect.getAmplifier()));
        } else if (type == PotionEffectType.BLINDNESS) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.NIGHT_VISION, effect.getDuration(), effect.getAmplifier()));
        } else if (type == PotionEffectType.POISON) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION, effect.getDuration(), effect.getAmplifier()));
        } else if (type == PotionEffectType.REGENERATION) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.POISON, effect.getDuration(), effect.getAmplifier()));
        }
    }

    @EventHandler
    public void onMobTarget(EntityTargetEvent event) {
        if (event.getTarget() instanceof Player) {
            Player player = (Player) event.getTarget();
            if ("undead".equals(playerClasses.get(player.getUniqueId()))) {
                event.setCancelled(true);
            }
        }
    }
    @EventHandler
    public void onArmorChange(PlayerItemHeldEvent event) {
        Player player = event.getPlayer();
        if ("undead".equals(playerClasses.get(player.getUniqueId()))) {
            int armorWeight = getArmorWeight(player);
            double speedModifier = 0.1 - (armorWeight * 0.01);
            player.getAttribute(Attribute.MOVEMENT_SPEED).setBaseValue(speedModifier);
        }
    }

    private int getArmorWeight(Player player) {
        int weight = 0;
        for (ItemStack item : player.getInventory().getArmorContents()) {
            if (item != null && item.getType() != Material.AIR) {
                weight++;
            }
        }
        return weight;
    }

    public void giveFishingRod(Player player) {
        ItemStack rod = new ItemStack(Material.FISHING_ROD);
        ItemMeta meta = rod.getItemMeta();
        meta.addEnchant(Enchantment.LURE, 3, true);
        meta.setUnbreakable(true);
        meta.displayName(Component.text("¬ßb–£–¥–æ—á–∫–∞ –†—ã–±–∞–∫–∞"));
        meta.addItemFlags(ItemFlag.HIDE_UNBREAKABLE);
        rod.setItemMeta(meta);
        player.getInventory().setItem(0, rod);  
    }

    public Map<UUID, String> getPlayerClasses() {
        return playerClasses;
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        Player player = event.getPlayer();
        String pClass = playerClasses.get(player.getUniqueId());

        if (pClass != null && pClass.equals("kiborg")) {
            if ((event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)
                    && player.getInventory().getItemInMainHand().getType() == Material.AIR) {
                
                long lastTime = kiborgCooldown.getOrDefault(player.getUniqueId(), 0L);
                long now = System.currentTimeMillis();

                if (now - lastTime < 60000) {
                    long timeLeft = (60000 - (now - lastTime)) / 1000;
                    player.sendMessage("¬ßc–í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–ª–æ—Å—å " + timeLeft + " —Å–µ–∫.");
                    return;
                }

                kiborgCooldown.put(player.getUniqueId(), now);
                Location eye = player.getEyeLocation();
                Vector dir = eye.getDirection().normalize();

                Fireball fireball = player.getWorld().spawn(eye.add(dir.multiply(1)), Fireball.class);
                fireball.setShooter(player);
                fireball.setVelocity(dir.multiply(1.5));
                fireball.setIsIncendiary(false);
                fireball.setYield(2.0f);
                // –°—Ç—Ä–µ–ª—å–±–∞ —Ñ–∞–µ—Ä–±–æ–ª–æ–º
            }
        }
    }

    private boolean isPlantBased(ItemStack item) {
        Material type = item.getType();
        return type == Material.APPLE || type == Material.CARROT || type == Material.POTATO || type == Material.BREAD;
    }

    private boolean isFish(ItemStack item) {
        Material type = item.getType();
        return type == Material.COD || type == Material.SALMON || type == Material.TROPICAL_FISH;
    }


    @EventHandler
    public void onEat(PlayerItemConsumeEvent event) {
        Player player = event.getPlayer();
        String pClass = playerClasses.get(player.getUniqueId());
        if (pClass == null) return;

        Material type = event.getItem().getType();
        
        if ("vegetarian".equals(pClass)) {
            if (isMeat(type)) {
                // –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –º—è—Å–∞
                player.addPotionEffect(new PotionEffect(PotionEffectType.POISON, 100, 1, false, false));
                player.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS, 200, 1, false, false));
                player.sendMessage("¬ßc–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü –ø–ª–æ—Ö–æ –ø–µ—Ä–µ–≤–∞—Ä–∏–≤–∞–µ—Ç –º—è—Å–æ!");
            } else {
                // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –µ–¥—ã
                player.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION, 60, 1, false, false));
                player.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 60, 0, false, false));
                player.sendMessage("¬ßa–ó–¥–æ—Ä–æ–≤–∞—è –ø–∏—â–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑—É!");
            }
        } else if ("automaton".equals(pClass)) {
            // –ê–≤—Ç–æ–º–∞—Ç–æ–Ω –º–æ–∂–µ—Ç –µ—Å—Ç—å –ª—é–±—É—é –µ–¥—É, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è
            event.setCancelled(true);
            
            int originalSaturation = getFoodSaturation(type);
            int newSaturation = originalSaturation / 2;

            // –£–¥–∞–ª—è–µ–º 1 –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å—Ç–µ–∫–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–µ–¥–∞–Ω–∏—è)
            ItemStack item = event.getItem();
            int amount = item.getAmount();
            if (amount > 1) {
                item.setAmount(amount - 1);
            } else {
                player.getInventory().removeItem(item);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º = 20)
            int currentFood = player.getFoodLevel();
            int newFoodLevel = Math.min(currentFood + newSaturation, 20);
            player.setFoodLevel(newFoodLevel);

            long now = System.currentTimeMillis();
            long lastMessageTime = lastEatMessage.getOrDefault(player.getUniqueId(), 0L);

            if (now - lastMessageTime > 1000) { // 1000 = 3 —Å–µ–∫
                player.sendMessage("¬ße–í—ã —Å—ä–µ–ª–∏ " + type + ", –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ " + newSaturation + " –µ–¥–∏–Ω–∏—Ü –≥–æ–ª–æ–¥–∞.");
                lastEatMessage.put(player.getUniqueId(), now);
            }
                
        }
    }

    public int getFoodSaturation(Material type) {
        switch (type) {
            case APPLE: return 2;
            case BAKED_POTATO: return 3;
            case BEEF: return 4;
            case BREAD: return 2;
            case CARROT: return 2;
            case COOKED_BEEF: return 4;
            case COOKED_CHICKEN: return 3;
            case COOKED_MUTTON: return 3;
            case COOKED_PORKCHOP: return 3;
            case COOKED_RABBIT: return 2;
            case COOKED_SALMON: return 3;
            case COOKIE: return 1;
            case GOLDEN_APPLE: return 4;
            case GOLDEN_CARROT: return 5 ;
            case MELON_SLICE: return 2;
            case MUSHROOM_STEW: return 5 ;
            case PUMPKIN_PIE: return 4 ;
            case RABBIT_STEW: return 3 ;
            case SWEET_BERRIES: return 1;
            case TROPICAL_FISH: return 1;
            default: return 2; // –ï—Å–ª–∏ –µ–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –º—è—Å–æ–º
    private boolean isMeat(Material type) {
        return type == Material.BEEF || type == Material.COOKED_BEEF ||
            type == Material.CHICKEN || type == Material.COOKED_CHICKEN ||
            type == Material.PORKCHOP || type == Material.COOKED_PORKCHOP ||
            type == Material.MUTTON  || type == Material.COOKED_MUTTON  ||
            type == Material.RABBIT  || type == Material.COOKED_RABBIT;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ "automaton"
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ PlayerMoveEvent
    private void applyAutomatonEffects(Player player) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ playerClasses —É –≤–∞—Å –æ–±—ä—è–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ)
        String pClass = playerClasses.get(player.getUniqueId());
        if (pClass == null) return;
        
        if (pClass.equals("automaton")) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—á–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ I (SLOWNESS, —É—Ä–æ–≤–µ–Ω—å 0)
            player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, Integer.MAX_VALUE, 0, false, false));
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ (–∞–≤—Ç–æ–º–∞—Ç–æ–Ω) —Å—Ç–æ–∏—Ç –Ω–∞ "—Ç—è–∂—ë–ª–æ–º" –±–ª–æ–∫–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ II
            Material groundType = player.getLocation().subtract(0, 1, 0).getBlock().getType();
            if (isRoughTerrain(groundType)) {
                player.sendMessage("¬ßc–í –≤–∞—à–∏ —à–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏ –ø–æ–ø–∞–ª–∏ –∫–∞–º–Ω–∏, –∏ –∏—Ö –∑–∞–µ–¥–∞–µ—Ç!");
                player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 100, 1)); // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ II –Ω–∞ 5 —Å–µ–∫
            }
        }
    }

    private void applyAutoHeal() {
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if ("automaton".equals(playerClasses.get(player.getUniqueId()))) {
                    double currentHealth = player.getHealth();
                    double maxHealth = player.getAttribute(Attribute.MAX_HEALTH).getBaseValue();
                    if (currentHealth < maxHealth) {
                        player.setHealth(Math.min(currentHealth + 1, maxHealth));
                    }
                }
            }
        }, 100L, 100L);
    }


    // üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–Ω–∞ (–∞–≤—Ç–æ–º–∞—Ç–æ–Ω –Ω–∞–Ω–æ—Å–∏—Ç +2 —É—Ä–æ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É)
    @EventHandler
    public void onEntityDamageByEntity(EntityDamageByEntityEvent event) {
        if (event.getDamager() instanceof Player) {
            Player attacker = (Player) event.getDamager();
            String pClass = playerClasses.get(attacker.getUniqueId());

            if ("automaton".equals(pClass)) {
                event.setDamage(event.getDamage() + 2);
                handleOverload(attacker);
            }
        }
    }

    // ‚öôÔ∏è –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ (3 —É–¥–∞—Ä–∞ –∑–∞ 2 —Å–µ–∫ ‚Üí –°–∏–ª–∞ I –Ω–∞ 2 —Å–µ–∫ ‚Üí –£—Å—Ç–∞–ª–æ—Å—Ç—å 10 —Å–µ–∫)
    private void handleOverload(Player attacker) {
        long now = System.currentTimeMillis();
        attackTimestamps.putIfAbsent(attacker.getUniqueId(), new ArrayList<>());
        List<Long> timestamps = attackTimestamps.get(attacker.getUniqueId());
        timestamps.add(now);
        timestamps.removeIf(time -> (now - time) > 2000);

        if (timestamps.size() >= 3) {
           attacker.addPotionEffect(new PotionEffect(PotionEffectType.STRENGTH, 40, 0, false, false));
            Bukkit.getScheduler().runTaskLater(this, () -> {
                attacker.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 200, 0, false, false));
            }, 40L);
            timestamps.clear();
        }
    }

    // üî© –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —è–¥–∞–º (—É–º–µ–Ω—å—à–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å POISON –∏ WITHER –≤ 2 —Ä–∞–∑–∞)
    @EventHandler
    public void onEntityPotionEffect(EntityPotionEffectEvent event) {
        if (event.getEntity() instanceof Player) {
            Player player = (Player) event.getEntity();
            if ("automaton".equals(playerClasses.get(player.getUniqueId()))) {
                PotionEffect newEffect = event.getNewEffect();
                if (newEffect != null) {
                    PotionEffectType type = newEffect.getType();
                    if (type == PotionEffectType.POISON || type == PotionEffectType.WITHER) {
                        event.setCancelled(true);
                        player.addPotionEffect(new PotionEffect(type, newEffect.getDuration() / 2, newEffect.getAmplifier()));
                    }
                }
            }
        }
    }

    // üí• –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ (–≤–∑—Ä—ã–≤ —Ä–∞–¥–∏—É—Å–æ–º 2 –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏)
    @EventHandler
    public void onEntityDeath(EntityDeathEvent event) {
        if (event.getEntity() instanceof Player) {
            Player player = (Player) event.getEntity();
            if ("automaton".equals(playerClasses.get(player.getUniqueId()))) {
                Location loc = player.getLocation();
                player.getWorld().createExplosion(loc, 2F, false, true);
            }
        }
    }


    // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ "—Ç—è–∂—ë–ª—ã—Ö" –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
    private boolean isRoughTerrain(Material type) {
        return type == Material.GRAVEL || type == Material.SAND || type == Material.RED_SAND ||
               type == Material.SOUL_SAND || type == Material.SOUL_SOIL ||
               type == Material.COARSE_DIRT || type == Material.DIRT || type == Material.MYCELIUM;
    }

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω–µ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    private void updateWealth(Player player) {
        double wealth = 0;
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null) {
                if (item.getType() == Material.DIAMOND) {
                    wealth += item.getAmount() * 0.5; // üîπ –ê–ª–º–∞–∑ +0.5
                } else if (item.getType() == Material.GOLD_INGOT) {
                    wealth += item.getAmount() * 0.25; // üîπ –ó–æ–ª–æ—Ç–æ +0.25
                } else if (item.getType() == Material.DIAMOND_BLOCK) {
                    wealth += item.getAmount() * 4; // üîπ –ê–ª–º–∞–∑–Ω—ã–π –±–ª–æ–∫ = 4 —Å–æ—Å—Ç–æ—è–Ω–∏—è
                } else if (item.getType() == Material.GOLD_BLOCK) {
                    wealth += item.getAmount() * 2.25; // üîπ –ó–æ–ª–æ—Ç–æ–π –±–ª–æ–∫ = 2.25 —Å–æ—Å—Ç–æ—è–Ω–∏—è
                }
            }
        }

        playerWealth.put(player.getUniqueId(), wealth);

        // üîπ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (wealth < 5) {
            player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 200, 0, false, false));
            player.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS, 200, 0, false, false));
            player.addPotionEffect(new PotionEffect(PotionEffectType.MINING_FATIGUE, 200, 0, false, false));
            player.setMaxHealth(12.0);
        } else if (wealth < 10) {
            player.removePotionEffect(PotionEffectType.MINING_FATIGUE);
            player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 200, 0, false, false));
            player.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS, 200, 0, false, false));
            player.setMaxHealth(17.0);
        } else if (wealth < 20) {
            player.removePotionEffect(PotionEffectType.SLOWNESS);
            player.removePotionEffect(PotionEffectType.WEAKNESS);
            player.removePotionEffect(PotionEffectType.HASTE);
            player.setMaxHealth(19.0);
        } else if (wealth < 30) {
            player.setMaxHealth(21.0);
            player.removePotionEffect(PotionEffectType.SPEED);
            player.removePotionEffect(PotionEffectType.HASTE);
        } else if (wealth < 32) {
            player.setMaxHealth(24.0);
            player.removePotionEffect(PotionEffectType.SPEED);
            player.removePotionEffect(PotionEffectType.JUMP_BOOST);
            player.removePotionEffect(PotionEffectType.HASTE);
        }
    }

    // üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
    public void startWealthCheck() {
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if ("richman".equals(playerClasses.get(player.getUniqueId()))) {
                    updateWealth(player);
                }
            }
        }, 100L, 100L);
    }

    // üîπ –ë–æ—Ä–º–æ—Ç–∞–Ω–∏–µ –±–æ–≥–∞—á–∞
    public void startRichManMurmur() {
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if ("richman".equals(playerClasses.get(player.getUniqueId()))) {
                    double wealth = playerWealth.getOrDefault(player.getUniqueId(), 0.0);

                    if (wealth >= 5 && wealth < 10) {
                        if (new Random().nextInt(1) == 1) {
                        player.sendMessage("¬ß7[–ë–æ—Ä–º–æ—á–µ—Ç]: –ì–¥–µ –∂–µ –º–æ–∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏...");
                        } else {
                            player.sendMessage("¬ß7[–ë–æ—Ä–º–æ—á–µ—Ç]: –ö—Ä–∏–ø—Ç–∞, –ê—Ä–±–µ—Ç—Ä–∞–∂, –ì–∞—Ä–∞–∂ ...");
                        }
                        
                    } else if (wealth >= 10 && wealth < 20) {
                        player.sendMessage("¬ß7[–ë–æ—Ä–º–æ—á–µ—Ç]: –ú–Ω–µ –±—ã –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞...");
                    } else if (wealth >= 20 && wealth < 30) {
                        player.sendMessage("¬ß6[–ë–æ—Ä–º–æ—á–µ—Ç]:  1 –º–æ–Ω–µ—Ç–∞, 2 –º–æ–Ω–µ—Ç–∞, 3 –º–æ–Ω–µ—Ç–∞, 4...");
                    } else if (wealth >= 32) {
                        player.sendMessage("¬ßc[–ë–æ—Ä–º–æ—á–µ—Ç]: –Ø –≤–ª–∞–¥—ã–∫–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞! –ó–ª–∞—Ç–æ ‚Äî –º–æ—è –¥—É—à–∞...");
                    }
                }
            }
        }, 600L, 1200L);
    }
        public void startWealthShadowsEffect() {
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if ("richman".equals(playerClasses.get(player.getUniqueId()))) {
                    double wealth = playerWealth.getOrDefault(player.getUniqueId(), 0.0);
                    
                    if (wealth > 15) {
                        playWhisperSounds(player);
                        
                    }

                    if (wealth > 20  && Math.random() < 0.2) { // üîπ 20% —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–Ω–∏
                        spawnShadowEntity(player);
                    }
                }
            }
        }, 6000L, 9000L); // üîπ –ö–∞–∂–¥—ã–µ 5-7.5 –º–∏–Ω—É—Ç
    }

    // üîπ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤
    private void playWhisperSounds(Player player) {
        Sound[] eerieSounds = { Sound.ENTITY_WITHER_SPAWN.ENTITY_ENDERMAN_AMBIENT, Sound.ENTITY_ELDER_GUARDIAN_AMBIENT };
        Sound randomSound = eerieSounds[new Random().nextInt(eerieSounds.length)];

        player.getWorld().playSound(player.getLocation(), randomSound, 0.7f, 1.2f);
        player.sendMessage("¬ß8–í—ã —Å–ª—ã—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —à–µ–ø–æ—Ç—ã... –ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ —Å–ª–µ–¥–∏—Ç –∑–∞ –≤–∞–º–∏.");

    }

    // üîπ –ò–ª–ª—é–∑–æ—Ä–Ω–∞—è —Ç–µ–Ω—å (–º–æ–±, –∫–æ—Ç–æ—Ä—ã–π –∏—Å—á–µ–∑–∞–µ—Ç)
    private void spawnShadowEntity(Player player) {
        Location loc = player.getLocation().add(
            (Math.random() * 6 - 3), 0, (Math.random() * 6 - 3) // üîπ –°–º–µ—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
        );

        Entity shadow = player.getWorld().spawnEntity(loc, EntityType.ENDERMAN);
        shadow.setSilent(true);
        
        Bukkit.getScheduler().runTaskLater(this, () -> {
            if (shadow.isValid()) shadow.remove(); // üîπ –¢–µ–Ω—å –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫
        }, 200L);

        player.sendMessage("¬ß8–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —á–µ–π-—Ç–æ –≤–∑–≥–ª—è–¥... –Ω–æ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.");
    }

  // üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–ª—é–∑–æ—Ä–Ω–æ–π –∞–ª–º–∞–∑–Ω–æ–π —Ä—É–¥—ã
    public void startIllusoryOreSpawn() {
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if ("richman".equals(playerClasses.get(player.getUniqueId()))) {
                    double wealth = playerWealth.getOrDefault(player.getUniqueId(), 0.0);
                    if (wealth > 32 && Math.random() < 0.5) {
                        Location loc = player.getLocation().clone().add(
                            (Math.random() * 10 - 5), // üîπ –°–º–µ—â–µ–Ω–∏–µ X
                            (Math.random() * 5 - 2), // üîπ –°–º–µ—â–µ–Ω–∏–µ Y
                            (Math.random() * 10 - 5)  // üîπ –°–º–µ—â–µ–Ω–∏–µ Z
                        );

                        spawnIllusoryOre(player, loc, 30); // 30 —Å–µ–∫ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                    }
                }
            }
        }, 12000L, 18000L); // üîπ –†–∞–∑ –≤ 10-15 –º–∏–Ω—É—Ç
    }
    @EventHandler
    public void onVillagerTradeDynamicPrice(PlayerInteractEntityEvent event) {
        if (!(event.getRightClicked() instanceof Villager villager)) return;

        Player player = event.getPlayer();
        UUID uuid = player.getUniqueId();

        if (!playerClasses.containsKey(uuid)) return;
        if (!playerClasses.get(uuid).equals("Richman")) return;

        double wealth = playerWealth.getOrDefault(uuid, 0.0);
        int priceBoost = (int) (wealth / 2); // –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –∑–∞ –∫–∞–∂–¥—ã–µ 1000       

        Bukkit.getScheduler().runTaskLater(this, () -> {
            List<MerchantRecipe> boostedRecipes = new ArrayList<>();

            for (MerchantRecipe original : villager.getRecipes()) {
                MerchantRecipe modified = new MerchantRecipe(original.getResult(), original.getMaxUses());
                List<ItemStack> boostedIngredients = new ArrayList<>();

                for (ItemStack ingredient : original.getIngredients()) {
                    ItemStack boosted = ingredient.clone();
                    boosted.setAmount(ingredient.getAmount() + priceBoost); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É
                    boostedIngredients.add(boosted);
                }

                modified.setIngredients(boostedIngredients);
                boostedRecipes.add(modified);
            }

            villager.setRecipes(boostedRecipes);
            player.sendMessage("¬ß6–í–∞—à–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ –ø—Ä–∏–≤–ª–µ–∫–ª–æ –≤–Ω–∏–º–∞–Ω–∏–µ... –¶–µ–Ω—ã –≤–∑–ª–µ—Ç–µ–ª–∏.");
        }, 2L); // –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è GUI
    }


    private void spawnIllusoryOre(Player player, Location loc, int duration) {
        Block block = loc.getBlock();
        block.setType(Material.DIAMOND_ORE);
        illusoryOres.put(loc, player.getUniqueId()); // üîπ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä—É–¥—É

        if (duration != Integer.MAX_VALUE) { // üîπ –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "–≤–µ—á–Ω–∞—è —Ä—É–¥–∞"
            Bukkit.getScheduler().runTaskLater(this, () -> {
                if (illusoryOres.containsKey(loc)) {
                    block.setType(Material.AIR);
                    illusoryOres.remove(loc);
                }
            }, duration * 20L); // üîπ –ü–µ—Ä–µ–≤–æ–¥ —Å–µ–∫—É–Ω–¥ –≤ —Ç–∏–∫–∏
        }
    }

    @EventHandler
    public void onPistonMove(BlockPistonExtendEvent event) {
        for (Block block : event.getBlocks()) {
            if (illusoryOres.containsKey(block.getLocation())) {
                Location newLoc = block.getLocation().add(event.getDirection().getDirection());
                illusoryOres.put(newLoc, illusoryOres.get(block.getLocation())); // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                illusoryOres.remove(block.getLocation());
            }
        }
    }

   @EventHandler
    public void onBlockBreak(BlockBreakEvent event) {
        Block block = event.getBlock();
        Location loc = block.getLocation();
        Player player = event.getPlayer();

        if (illusoryOres.containsKey(loc) && illusoryOres.get(loc).equals(player.getUniqueId())) {
            event.setDropItems(false); // üîπ –£–±–∏—Ä–∞–µ–º –¥—Ä–æ–ø
            block.setType(Material.AIR); // üîπ –£–¥–∞–ª—è–µ–º –±–ª–æ–∫
            illusoryOres.remove(loc);
            player.sendMessage("¬ß7–ù–µ–µ—Ç! –ù–µ –∏—Å—á–µ–∑–∞–π! –ù–µ–µ–µ—Ç!");
        }
    }

    public void startGreedMadnessEffect() {
    Bukkit.getScheduler().runTaskTimer(this, () -> {
        for (Player player : Bukkit.getOnlinePlayers()) {
            if ("richman".equals(playerClasses.get(player.getUniqueId()))) {
                double greed = playerWealth.getOrDefault(player.getUniqueId(), 0.0);
                
                if (greed > 30) {
                    applyMadnessEffect(player);
                }
            }
        }
    }, 12000L, 18000L); // üîπ –†–∞–∑ –≤ 10-15 –º–∏–Ω—É—Ç
}

private void applyMadnessEffect(Player player) {
    player.addPotionEffect(new PotionEffect(PotionEffectType.DARKNESS, 100, 0, false, false)); // üîπ –¢—å–º–∞ –Ω–∞ 5 —Å–µ–∫
    player.setMaxHealth(10.0); // üîπ –£–º–µ–Ω—å—à–∞–µ–º –•–ü –¥–æ 10

    ItemStack[] inventory = player.getInventory().getContents();
    List<ItemStack> validItems = new ArrayList<>();

    // üîπ –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å
    for (ItemStack item : inventory) {
        if (item != null && item.getType() != Material.AIR) {
            validItems.add(item);
        }
    }

    if (!validItems.isEmpty()) {
        // üîπ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        ItemStack randomItem = validItems.get(new Random().nextInt(validItems.size()));

        // üîπ –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        player.getInventory().removeItem(randomItem);

        // üîπ –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –º–∏—Ä
        player.getWorld().dropItemNaturally(player.getLocation(), randomItem);
        
        player.sendMessage("¬ßc–í—ã —É—Ä–æ–Ω–∏–ª–∏ " + randomItem.getType().name().toLowerCase().replace("_", " ") + "!");
    } // üîπ –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    
    Bukkit.getScheduler().runTaskLater(this, () -> {
        player.setMaxHealth(21.0); // üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –•–ü –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥
    }, 100L);
    
    player.sendMessage("¬ß8¬ßl–í–∞—à–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ –∑–∞—Ç—É–º–∞–Ω–∏–ª–æ —Ä–∞—Å—Å—É–¥–æ–∫... –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–ª–∞–±–æ—Å—Ç—å.");
}


}